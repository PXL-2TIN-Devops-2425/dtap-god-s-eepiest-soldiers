pipeline {
    agent any
    
        environment{
        REMOTE_SERVER = "52.90.22.43"
        SSH_CREDENTIALS = "aws-private-key"
    	DOCKER_CREDENTIALS = "dockerhub-creds"
    	IMAGE_NAME = "calculator-final-app-eepy"
    	DOCKER_HUB_REPO = "anatolisafonov/${IMAGE_NAME}"
    	PATH = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
    }
    
    
    
    stages {
    	stage("Debug){
	    steps{
		script {
                    sh 'echo "Checking Docker status"'
                    sh 'docker info || echo "Docker info failed"'
                    
                    sh 'echo "Checking running containers"'
                    sh 'docker ps -q || echo "No running containers"'
                    
                    sh 'echo "Stopping all containers"'
                    sh 'docker stop $(docker ps -q) || echo "No running containers to stop"'
                    
                    sh 'echo "Removing all containers"'
                    sh 'docker rm $(docker ps -a -q) || echo "No containers to remove"'
                }
	    }
	}
    
    	stage("Stopping and deleting all running docker containers"){
            steps{
            	sh """
                    docker stop $(docker ps -q) || true
                    docker rm $(docker ps -q -a) || true
                """
            }
        }
        
        stage('deploy prod') {
            steps {
            	script{
            	    sshagent([SSH_CREDENTIALS]){
            	    	sh """
            	    	    ssh -o StrictHostKeyChecking=no ubuntu@${REMOTE_SERVER} 'docker pull ${DOCKER_HUB_REPO}'
            	    	"""
            	    }
            	}
            }
        }
        
        stage('start prod'){
            steps{
            	script{
            	    sshagent([SSH_CREDENTIALS]){
            	    	sh """
            	    	    ssh -o StrictHostKeyChecking=no ubuntu@${REMOTE_SERVER} 'docker run -d -p 80:3000 ${DOCKER_HUB_REPO}'
            	    	"""
            	    }
            	}
            }
        }
        
    }
}
